@mixin center-with-flex($justification: center, $alignment: center) {
  display: flex;
  justify-content: $justification;
  align-items: $alignment;
}

@mixin use-wrapper($width: 1200px) {
  width: 90%;
  margin: 0 auto;

  @media screen and (min-width: 1280px) {
    width: $width;
  }
}

// 2. Create function which returns mq-value
@function get-mq-value($breakpoint) {
  $value: null;

  @if $breakpoint {
    $value: map-get(
      $map: $media-queries,
      $key: $breakpoint,
    );
  } @else {
    @error 'Please provide a valid breakpoint value.';
  }

  @return $value;
}

// 3. Create function which decodes mq args
// 3.1 If arglist is a vector
//  - take all args and put them together into a list,
//  - output the list content as a single string in which every item must be separated by a space and a comma,
// 3.2 If arglist has a single value
//  - return just a valid mq value if present

@function decode-mq-args($args...) {
  $result: null;
  $list-len: length($args);
  $mq-value: null;

  @if $list-len > 1 {
    @for $i from 1 through $list-len {
      $breakpoint: nth($args, $i);
      $mq-value: get-mq-value($breakpoint);

      @if $mq-value {
        @if $i == 1 {
          $result: $mq-value;
        } @else {
          $result: '#{$result}, #{$mq-value}';
        }
      } @else {
        @error 'There is no media query value for "#{$breakpoint}" in the media-queries map.';
      }
    }
  } @else if $list-len == 1 {
    $breakpoint: nth($args, 1);
    $mq-value: get-mq-value($breakpoint);

    @if $mq-value {
      $result: $mq-value;
    } @else {
      @error 'There is no media query value for "#{$breakpoint}" in the media-queries map.';
    }
  }

  @return $result;
}

// 4. Create a mixin which uses the decode-mq-args function
@mixin use-mq-manager($breakpoints...) {
  $mq-value: decode-mq-args($breakpoints...);

  @if $mq-value {
    @media screen and #{$mq-value} {
      @content;
    }
  }
}

// Here we have to possibilities to scale the image:
// - by setting only the 'width' property to 'auto' value,
// - be setting together 'width' and 'height' to 'auto' and 100% respectively,
@mixin use-image-holder($scaling-type, $breakpoints...) {
  @include use-mq-manager($breakpoints...) {
    overflow: hidden;
    position: relative;
  }

  img {
    display: block;
    width: 100%;

    @include use-mq-manager($breakpoints...) {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);

      @if $scaling-type == auto {
        width: auto;
      } @else if $scaling-type == stretch {
        height: 100%;
        width: auto;
      }
    }
  }
}

@mixin normalize-button {
  padding: 0.75em 1em;
  background-color: var(--orange-dark);
  font-size: 12px;
  letter-spacing: 1px;
  text-transform: uppercase;
  text-decoration: none;
  color: white;

  @include use-mq-manager($mq-bp-lg) {
    font-size: 16px;
  }
}
