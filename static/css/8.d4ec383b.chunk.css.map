{"version":3,"sources":["Events.scss","../../partials/_mixins.scss","../../partials/_variables.scss","EventItem.scss"],"names":[],"mappings":"AAGA,QCIE,SAAU,CACV,aAAc,CDFd,mBEFwB,CFGzB,qCAJD,QCQI,YAL6B,CDChC,CGJD,YACE,kBAAsC,CACtC,6BAA8B,CAFhC,0BAKI,eAAiC,CAClC,oCANH,YASI,YAAa,CATjB,yDAYM,OAAQ,CACT,CF6DD,oCE1DF,6BAEI,cAAA,CFmEF,eAAgB,CAChB,iBEpEiB,CAGlB,CALA,iCF0EC,aAAc,CACd,UAAW,CAjBX,oCE1DD,iCF8EG,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACT,sCAAgC,CAAhC,8BAAgC,CAG9B,UAAW,CAMhB,CEnFD,kBACE,YD3BmB,CCgDpB,oCAtBD,kBAII,cAAe,CAkBlB,CAtBA,oBAOG,aAAc,CACd,WAAY,CACZ,mCAAoC,CACpC,cAAe,CACf,oBAAqB,CACrB,iBAAkB,CAClB,wBAAyB,CACzB,kBAAmB,CACnB,aAAc,CACd,kBAAmB,CAKpB,qCArBF,oBAmBK,cAAe,CAElB,CAGH,mBACE,kBAAoC,CACpC,cAAe,CACf,eAAgB,CAChB,wBAAyB,CAK1B,qCATD,mBAOI,cAAe,CAElB,CAED,kBACE,cAAe,CACf,sBAAuB,CAKxB,qCAPD,kBAKI,cAAe,CAElB","file":"8.d4ec383b.chunk.css","sourcesContent":["@import '../../partials/variables';\r\n@import '../../partials/mixins';\r\n\r\n.events {\r\n  @include use-wrapper();\r\n\r\n  padding: $vertical-padding-xs 0 $vertical-padding-sm;\r\n}\r\n","@mixin center-with-flex($justification: center, $alignment: center) {\r\n  display: flex;\r\n  justify-content: $justification;\r\n  align-items: $alignment;\r\n}\r\n\r\n@mixin use-wrapper($width: 1200px) {\r\n  width: 90%;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    width: $width;\r\n  }\r\n}\r\n\r\n// 2. Create function which returns mq-value\r\n@function get-mq-value($breakpoint) {\r\n  $value: null;\r\n\r\n  @if $breakpoint {\r\n    $value: map-get(\r\n      $map: $media-queries,\r\n      $key: $breakpoint,\r\n    );\r\n  } @else {\r\n    @error 'Please provide a valid breakpoint value.';\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n// 3. Create function which decodes mq args\r\n// 3.1 If arglist is a vector\r\n//  - take all args and put them together into a list,\r\n//  - output the list content as a single string in which every item must be separated by a space and a comma,\r\n// 3.2 If arglist has a single value\r\n//  - return just a valid mq value if present\r\n\r\n@function decode-mq-args($args...) {\r\n  $result: null;\r\n  $list-len: length($args);\r\n  $mq-value: null;\r\n\r\n  @if $list-len > 1 {\r\n    @for $i from 1 through $list-len {\r\n      $breakpoint: nth($args, $i);\r\n      $mq-value: get-mq-value($breakpoint);\r\n\r\n      @if $mq-value {\r\n        @if $i == 1 {\r\n          $result: $mq-value;\r\n        } @else {\r\n          $result: '#{$result}, #{$mq-value}';\r\n        }\r\n      } @else {\r\n        @error 'There is no media query value for \"#{$breakpoint}\" in the media-queries map.';\r\n      }\r\n    }\r\n  } @else if $list-len == 1 {\r\n    $breakpoint: nth($args, 1);\r\n    $mq-value: get-mq-value($breakpoint);\r\n\r\n    @if $mq-value {\r\n      $result: $mq-value;\r\n    } @else {\r\n      @error 'There is no media query value for \"#{$breakpoint}\" in the media-queries map.';\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n// 4. Create a mixin which uses the decode-mq-args function\r\n@mixin use-mq-manager($breakpoints...) {\r\n  $mq-value: decode-mq-args($breakpoints...);\r\n\r\n  @if $mq-value {\r\n    @media screen and #{$mq-value} {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n// Here we have to possibilities to scale the image:\r\n// - by setting only the 'width' property to 'auto' value,\r\n// - be setting together 'width' and 'height' to 'auto' and 100% respectively,\r\n@mixin use-image-holder($scaling-type, $breakpoints...) {\r\n  @include use-mq-manager($breakpoints...) {\r\n    overflow: hidden;\r\n    position: relative;\r\n  }\r\n\r\n  img {\r\n    display: block;\r\n    width: 100%;\r\n\r\n    @include use-mq-manager($breakpoints...) {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n\r\n      @if $scaling-type == auto {\r\n        width: auto;\r\n      } @else if $scaling-type == stretch {\r\n        height: 100%;\r\n        width: auto;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin normalize-button {\r\n  padding-left: $horizontal-spacing;\r\n  padding-right: $horizontal-spacing;\r\n  background-color: var(--orange-dark);\r\n  font-size: 15px;\r\n  line-height: 3;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  text-decoration: none;\r\n  color: white;\r\n\r\n  @include use-mq-manager($mq-bp-lg) {\r\n    font-size: 20px;\r\n  }\r\n}\r\n","$vertical-spacing: 30px;\r\n$horizontal-spacing: 30px;\r\n\r\n$vertical-padding-xs: 20px;\r\n$vertical-padding-sm: 40px;\r\n$vertical-padding-md: 60px;\r\n$vertical-padding-large: 80px;\r\n\r\n$scaling-auto: auto;\r\n$scaling-stretch: stretch;\r\n\r\n// 0. Use vars to store keys values:\r\n$mq-bp-ss: 'breakpoint-ss';\r\n$mq-bp-xs: 'breakpoint-xs';\r\n$mq-bp-sm: 'breakpoint-sm';\r\n$mq-bp-md: 'breakpoint-md';\r\n$mq-bp-lg: 'breakpoint-lg';\r\n$mq-bp-xl: 'breakpoint-xl';\r\n\r\n// 1. Create map with MQ keys and values\r\n$media-queries: (\r\n  $mq-bp-ss: '(min-width: 320px)',\r\n  $mq-bp-xs: '(min-width: 533px)',\r\n  $mq-bp-sm: '(min-width: 768px)',\r\n  $mq-bp-md: '(min-width: 768px) and (min-height: 1024px)',\r\n  $mq-bp-lg: '(min-width: 1024px)',\r\n  $mq-bp-xl: '(min-width: 1280px)',\r\n);\r\n","@import '../../partials/variables';\r\n@import '../../partials/mixins';\r\n\r\n.event-item {\r\n  margin-bottom: $vertical-spacing * 1.5;\r\n  background-color: var(--smoke);\r\n\r\n  &:first-of-type {\r\n    margin-top: $vertical-spacing * 3;\r\n  }\r\n\r\n  @include use-mq-manager($mq-bp-sm) {\r\n    display: flex;\r\n\r\n    &:nth-of-type(even) &__image-container {\r\n      order: 1;\r\n    }\r\n  }\r\n\r\n  &__image-container {\r\n    @include use-mq-manager($mq-bp-sm) {\r\n      flex-basis: 40%;\r\n    }\r\n    @include use-image-holder($scaling-auto, $mq-bp-sm);\r\n  }\r\n\r\n  &__info {\r\n    padding: $vertical-spacing;\r\n\r\n    @include use-mq-manager($mq-bp-sm) {\r\n      flex-basis: 60%;\r\n    }\r\n    a {\r\n      display: block;\r\n      width: 150px;\r\n      background-color: var(--orange-dark);\r\n      font-size: 12px;\r\n      text-decoration: none;\r\n      text-align: center;\r\n      text-transform: uppercase;\r\n      letter-spacing: 1px;\r\n      line-height: 3;\r\n      color: var(--smoke);\r\n\r\n      @include use-mq-manager($mq-bp-xl) {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__title {\r\n    margin-bottom: $vertical-spacing / 3;\r\n    font-size: 22px;\r\n    font-weight: 400;\r\n    color: var(--orange-dark);\r\n\r\n    @include use-mq-manager($mq-bp-xl) {\r\n      font-size: 24px;\r\n    }\r\n  }\r\n\r\n  &__date {\r\n    font-size: 14px;\r\n    color: var(--gray-dark);\r\n\r\n    @include use-mq-manager($mq-bp-xl) {\r\n      font-size: 16px;\r\n    }\r\n  }\r\n}\r\n"]}