{"version":3,"sources":["Gallery.scss","../../partials/_mixins.scss","../../partials/_variables.scss","PageHeading.scss","MasonryGrid.scss","Animator.scss"],"names":[],"mappings":"AAGA,SCIE,SAAU,CACV,aAAc,CDFd,mBEFwB,CFGzB,qCAJD,SCQI,YAL6B,CDChC,CGJD,cACE,iBAAkB,CAClB,aDLqB,CCMrB,mBDNqB,CCQrB,iBAAkB,CAClB,wBAAyB,CACzB,eAAgB,CAWd,wBACE,cAVuB,CAexB,qCAND,wBAII,cAb2B,CAe9B,CAND,yBACE,cAVsD,CAevD,qCAND,yBAII,cAb0D,CAe7D,CAND,wBACE,cAVoF,CAerF,qCAND,wBAII,cAbwF,CAe3F,CAxBL,oBA4BI,iBAAkB,CAClB,UAAW,CACX,aAAc,CACd,QAAS,CACT,QAAS,CACT,UAAW,CACX,WAAY,CACZ,sCAAgC,CAAhC,8BAAgC,CAChC,mCAAoC,CCpCxC,cACE,YAAa,CACb,qBAAsB,CAQvB,qCAVD,cAKI,oBAAqB,CACrB,mCAAqC,CACrC,oBAAqB,CACrB,gBFPsB,CESzB,CAED,YAEE,UAAW,CACX,cAAe,CAsBhB,oCAzBD,YHyEI,eAAgB,CAChB,iBAAkB,CGjDrB,CAzBD,gBH8EI,aAAc,CACd,UAAW,CAjBX,oCG9DJ,gBHkFM,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACT,sCAAgC,CAAhC,8BAAgC,CAK9B,WAAY,CACZ,UAAW,CAGhB,CAhCC,qCG9DJ,4BAOM,eAAgB,CAPtB,0BAWM,eAAgB,CAChB,kBAAmB,CACpB,CAbL,gBAiBI,kDAAA,CAAA,0CAAA,CAAA,kCAAA,CAAA,kEAAoC,CAjBxC,sBAsBM,kDAAA,CAAA,0CAA4C,CCrClD,UACE,eAAgB,CADlB,YAII,+BAAyB,CAAzB,uBAAyB,CACzB,gCAAyB,CAAzB,wBAAyB,CACzB,mCAAA,CAAA,2BAA4B,CAE5B,2BACE,GACE,kCAA2B,CAA3B,0BAA2B,CAC3B,SAAU,CAGZ,IACE,UAAY,CAGd,GACE,+BAAwB,CAAxB,uBAAwB,CACxB,SAAU,CAAA,CAZd,mBACE,GACE,kCAA2B,CAA3B,0BAA2B,CAC3B,SAAU,CAGZ,IACE,UAAY,CAGd,GACE,+BAAwB,CAAxB,uBAAwB,CACxB,SAAU,CAAA,CAId,4BACE,GACE,SAAU,CAGZ,IACE,UAAY,CAGd,GACE,SAAU,CAAA,CAVd,oBACE,GACE,SAAU,CAGZ,IACE,UAAY,CAGd,GACE,SAAU,CAAA,CAKhB,2BACE,8BAAA,CAAA,sBAAuB,CACxB,2BAGC,+BAAA,CAAA,uBAAwB,CACzB,wBAGC,oCAAA,CAAA,4BAA6B","file":"5.0fd2afdc.chunk.css","sourcesContent":["@import '../../partials/variables';\r\n@import '../../partials/mixins';\r\n\r\n.gallery {\r\n  @include use-wrapper();\r\n\r\n  padding: $vertical-padding-xs 0 $vertical-padding-sm;\r\n}\r\n","@mixin center-with-flex($justification: center, $alignment: center) {\r\n  display: flex;\r\n  justify-content: $justification;\r\n  align-items: $alignment;\r\n}\r\n\r\n@mixin use-wrapper($width: 1200px) {\r\n  width: 90%;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    width: $width;\r\n  }\r\n}\r\n\r\n// 2. Create function which returns mq-value\r\n@function get-mq-value($breakpoint) {\r\n  $value: null;\r\n\r\n  @if $breakpoint {\r\n    $value: map-get(\r\n      $map: $media-queries,\r\n      $key: $breakpoint,\r\n    );\r\n  } @else {\r\n    @error 'Please provide a valid breakpoint value.';\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n// 3. Create function which decodes mq args\r\n// 3.1 If arglist is a vector\r\n//  - take all args and put them together into a list,\r\n//  - output the list content as a single string in which every item must be separated by a space and a comma,\r\n// 3.2 If arglist has a single value\r\n//  - return just a valid mq value if present\r\n\r\n@function decode-mq-args($args...) {\r\n  $result: null;\r\n  $list-len: length($args);\r\n  $mq-value: null;\r\n\r\n  @if $list-len > 1 {\r\n    @for $i from 1 through $list-len {\r\n      $breakpoint: nth($args, $i);\r\n      $mq-value: get-mq-value($breakpoint);\r\n\r\n      @if $mq-value {\r\n        @if $i == 1 {\r\n          $result: $mq-value;\r\n        } @else {\r\n          $result: '#{$result}, #{$mq-value}';\r\n        }\r\n      } @else {\r\n        @error 'There is no media query value for \"#{$breakpoint}\" in the media-queries map.';\r\n      }\r\n    }\r\n  } @else if $list-len == 1 {\r\n    $breakpoint: nth($args, 1);\r\n    $mq-value: get-mq-value($breakpoint);\r\n\r\n    @if $mq-value {\r\n      $result: $mq-value;\r\n    } @else {\r\n      @error 'There is no media query value for \"#{$breakpoint}\" in the media-queries map.';\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n// 4. Create a mixin which uses the decode-mq-args function\r\n@mixin use-mq-manager($breakpoints...) {\r\n  $mq-value: decode-mq-args($breakpoints...);\r\n\r\n  @if $mq-value {\r\n    @media screen and #{$mq-value} {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n// Here we have to possibilities to scale the image:\r\n// - by setting only the 'width' property to 'auto' value,\r\n// - be setting together 'width' and 'height' to 'auto' and 100% respectively,\r\n@mixin use-image-holder($scaling-type, $breakpoints...) {\r\n  @include use-mq-manager($breakpoints...) {\r\n    overflow: hidden;\r\n    position: relative;\r\n  }\r\n\r\n  img {\r\n    display: block;\r\n    width: 100%;\r\n\r\n    @include use-mq-manager($breakpoints...) {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n\r\n      @if $scaling-type == auto {\r\n        width: auto;\r\n      } @else if $scaling-type == stretch {\r\n        height: 100%;\r\n        width: auto;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin normalize-button {\r\n  padding-left: $horizontal-spacing;\r\n  padding-right: $horizontal-spacing;\r\n  background-color: var(--orange-dark);\r\n  font-size: 15px;\r\n  line-height: 3;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  text-decoration: none;\r\n  color: white;\r\n\r\n  @include use-mq-manager($mq-bp-lg) {\r\n    font-size: 20px;\r\n  }\r\n}\r\n","$vertical-spacing: 30px;\r\n$horizontal-spacing: 30px;\r\n\r\n$vertical-padding-xs: 20px;\r\n$vertical-padding-sm: 40px;\r\n$vertical-padding-md: 60px;\r\n$vertical-padding-large: 80px;\r\n\r\n$scaling-auto: auto;\r\n$scaling-stretch: stretch;\r\n\r\n// 0. Use vars to store keys values:\r\n$mq-bp-ss: 'breakpoint-ss';\r\n$mq-bp-xs: 'breakpoint-xs';\r\n$mq-bp-sm: 'breakpoint-sm';\r\n$mq-bp-md: 'breakpoint-md';\r\n$mq-bp-lg: 'breakpoint-lg';\r\n$mq-bp-xl: 'breakpoint-xl';\r\n\r\n// 1. Create map with MQ keys and values\r\n$media-queries: (\r\n  $mq-bp-ss: '(min-width: 320px)',\r\n  $mq-bp-xs: '(min-width: 533px)',\r\n  $mq-bp-sm: '(min-width: 768px)',\r\n  $mq-bp-md: '(min-width: 768px) and (min-height: 1024px)',\r\n  $mq-bp-lg: '(min-width: 1024px)',\r\n  $mq-bp-xl: '(min-width: 1280px)',\r\n);\r\n","@import '../../partials/variables';\r\n@import '../../partials/mixins';\r\n\r\n.page-heading {\r\n  position: relative;\r\n  margin: $vertical-spacing 0 $vertical-spacing;\r\n  padding-bottom: $vertical-spacing;\r\n\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-weight: 300;\r\n\r\n  $list: ('--is-small', (26px, 28px)), ('--is-normal', (32px, 34px)), ('--is-large', (38px, 40px));\r\n\r\n  @each $item in $list {\r\n    $modifier: nth($item, 1);\r\n\r\n    $sizes: nth($item, 2);\r\n    $small-size: nth($sizes, 1);\r\n    $large-size: nth($sizes, 2);\r\n\r\n    &#{$modifier} {\r\n      font-size: $small-size;\r\n\r\n      @include use-mq-manager($mq-bp-xl) {\r\n        font-size: $large-size;\r\n      }\r\n    }\r\n  }\r\n\r\n  &:after {\r\n    position: absolute;\r\n    content: '';\r\n    display: block;\r\n    top: 100%;\r\n    left: 50%;\r\n    height: 2px;\r\n    width: 100px;\r\n    transform: translate(-50%, -2px);\r\n    background-color: var(--orange-dark);\r\n  }\r\n}\r\n","@import '../../partials/variables';\r\n@import '../../partials/mixins';\r\n\r\n.masonry-grid {\r\n  display: grid;\r\n  grid-auto-rows: 87.5vh;\r\n\r\n  @include use-mq-manager($mq-bp-lg) {\r\n    grid-auto-rows: 250px;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-auto-flow: dense;\r\n    padding-top: $vertical-padding-sm;\r\n  }\r\n}\r\n\r\n.image-cell {\r\n  @include use-image-holder($scaling-stretch, $mq-bp-ss);\r\n  margin: 5px;\r\n  cursor: pointer;\r\n\r\n  @include use-mq-manager($mq-bp-lg) {\r\n    &:nth-child(5n + 2) {\r\n      grid-row: span 2;\r\n    }\r\n\r\n    &:nth-child(4n) {\r\n      grid-row: span 2;\r\n      grid-column: span 2;\r\n    }\r\n  }\r\n\r\n  img {\r\n    transition: transform 250ms ease-out;\r\n  }\r\n\r\n  &:hover {\r\n    img {\r\n      transform: translate(-50%, -50%) scale(1.25);\r\n    }\r\n  }\r\n}\r\n",".animator {\r\n  overflow: hidden;\r\n\r\n  & > * {\r\n    animation-duration: 750ms;\r\n    animation-fill-mode: both;\r\n    animation-play-state: paused;\r\n\r\n    @keyframes pull-up {\r\n      0% {\r\n        transform: translateY(100%);\r\n        opacity: 0;\r\n      }\r\n\r\n      50% {\r\n        opacity: 0.5;\r\n      }\r\n\r\n      100% {\r\n        transform: translateY(0);\r\n        opacity: 1;\r\n      }\r\n    }\r\n\r\n    @keyframes fade-out {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n\r\n      50% {\r\n        opacity: 0.5;\r\n      }\r\n\r\n      100% {\r\n        opacity: 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  &--is-pulling-up > * {\r\n    animation-name: pull-up;\r\n  }\r\n\r\n  &--is-fading-out > * {\r\n    animation-name: fade-out;\r\n  }\r\n\r\n  &--is-playing > * {\r\n    animation-play-state: running;\r\n  }\r\n}\r\n"]}